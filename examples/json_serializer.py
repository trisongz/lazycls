"""
This test will show how to use the various Json serializer(s)
"""

from lazy.io.pathz import get_path
from lazy.serialize import SimdJson, OrJson, Json, Serializer
from lazy.utils import get_logger, timer

logger = get_logger('lazytest')
test_file = './files/naics_codes.json'
test_path = get_path(test_file, resolve=True)

test_keys = [
    '112930', '11299', '112990', '1131', '11311', '113110', '1132', '11321', '113210', '1133', '11331', '113310', '1141', '11411', '114111', '114112', '114119', '1142', '11421', '114210', '1151', '11511', '115111', '115112', '115113', '115114', '115115', '115116', '1152', '11521', '115210', '1153', '11531', '115310', '2111', '21112', '211120', '21113', '211130', '2121', '21211', '212111', '212112', '212113', '2122', '21221', '212210', '21222', '212221', '212222', '21223', '212230', '21229', '212291', '212299', '2123', '21231', '212311', '212312', '212313', '212319', '21232', '212321', '212322', '212324', '212325', '21239', '212391', '212392', '212393', '212399', '2131', '21311', '213111', '213112', '213113', '213114', '213115', '2211', '22111', '221111', '221112', '221113', '221114', '221115', '221116', '221117', '221118', '22112', '221121', '221122', '2212', '22121', '221210', '2213', '22131', '221310', '22132', '221320', '22133', '221330', '2361', '23611', '236115', '236116', '236117', '236118', '2362', '23621', '236210', '23622', '236220', '2371', '23711', '237110', '23712', '237120', '23713', '237130', '2372', '23721', '237210', '2373', '23731', '237310', '2379', '23799', '237990', '2381', '23811', '238110',
    '32412', '324121', '324122', '32419', '324191', '324199', '3251', '32511', '325110', '32512', '325120', '32513', '325130', '32518', '325180', '32519', '325193', '325194', '325199', '3252', '32521', '325211', '325212', '32522', '325220', '3253', '32531', '325311', '325312', '325314', '32532', '325320', '3254', '32541', '325411', '325412', '325413', '325414', '3255', '32551', '325510', '32552', '325520', '3256', '32561', '325611', '325612', '325613', '32562', '325620', '3259', '32591', '325910', '32592', '325920', '32599', '325991', '325992', '325998', '3261', '32611', '326111', '326112', '326113', '32612', '326121', '326122', '32613', '326130', '32614', '326140', '32615', '326150', '32616', '326160', '32619', '326191', '326199', '3262', '32621', '326211', '326212', '32622', '326220', '32629', '326291', '326299', '3271', '32711', '327110', '32712', '327120', '3272', '32721', '327211', '327212', '327213', '327215', '3273', '32731', '327310', '32732', '327320', '32733', '327331', '327332', '32739', '327390', '3274', '32741', '327410', '32742', '327420', '3279', '32791', '327910', '32799', '327991', '327992', '327993', '327999', '3311', '33111', '331110', '3312', '33121', '331210', '33122', '3312',
    '333413', '333414', '333415', '3335', '33351', '333511', '333514', '333515', '333517', '333519', '3336', '33361', '333611', '333612', '333613', '333618', '3339', '33391', '333912', '333914', '33392', '333921', '333922', '333923', '333924', '33399', '333991', '333992', '333993', '333994', '333995', '333996', '333997', '333999', '3341', '33411', '334111', '334112', '334118', '3342', '33421', '334210', '33422', '334220', '33429', '334290', '3343', '33431', '334310', '3344', '33441', '334412', '334413', '334416', '334417', '334418', '334419', '3345', '33451', '334510', '334511', '334512', '334513', '334514', '334515', '334516', '334517', '334519', '3346', '33461', '334613', '334614', '3351', '33511', '335110', '33512', '335121', '335122', '335129', '3352', '33521', '335210', '33522', '335220', '3353', '33531', '335311', '335312', '335313', '335314', '3359', '33591', '335911', '335912', '33592', '335921', '335929', '33593', '335931', '335932', '33599', '335991', '335999', '3361', '33611', '336111',
    '519190', '5211', '52111', '521110', '5221', '52211', '522110', '52212', '522120', '52213', '522130', '52219', '522190', '5222', '52221', '522210', '52222', '522220', '52229', '522291', '522292', '522293', '522294', '522298', '5223', '52231', '522310', '52232', '522320', '52239', '522390', '5231', '52311', '523110', '52312', '523120', '52313', '523130', '52314', '523140', '5232', '52321', '523210', '5239', '52391',
    '7113', '71131', '711310', '71132', '711320', '7114', '71141', '711410', '7115', '71151', '711510', '7121', '71211', '712110', '71212', '712120', '71213', '712130', '71219', '712190', '7131', '71311', '713110', '71312', '713120', '7132', '71321', '713210', '71329', '713290', '7139', '71391', '713910', '71392', '713920', '71393', '713930', '71394', '713940', '71395', '713950', '71399', '713990', '7211', '72111', '721110', '72112', '721120', '72119', '721191', '721199', '7212', '72121', '721211', '721214', '7213', '72131', '721310', '7223', '72231', '722310', '72232', '722320', '72233', '722330', '7224', '72241', '722410', '7225', '72251', '722511', '722513', '722514', '722515', '8111', '81111', '811111', '811112', '811113', '811118', '81112', '811121', '811122', '81119', '811191', '811192', '811198', '8112', '81121', '811211', '811212', '811213', '811219', '8113', '81131', '811310', '8114', '81141', '811411', '811412', '81142', '811420', '81143', '811430', '81149', '811490', '8121', '81211', '812111',
]

def get_text():
    s = timer()
    text = test_path.read_text()
    logger(f'Time to Read Text: {timer(s, as_string=True, short=True)}')
    return text

def test_simdjson():
    js = timer()
    text = get_text()
    t = SimdJson.parse(text)
    logger(f'[SimdJson] Time to Parse: {timer(js, as_string=True, short=True)}')
    num_keys = len(t.keys)
    logger(f'[SimdJson] Time to Load {num_keys} Keys: {timer(js, as_string=True, short=True)}')
    lt = timer()
    for i in test_keys:
        _ = t[i]
    logger(f'[SimdJson] Time to Read {len(test_keys)} Items: {timer(lt, as_string=True, short=True)}')
    lt = timer()
    _ = SimdJson.dumps(t)
    logger(f'[SimdJson] Time to Dump {len(test_keys)} Items: {timer(lt, as_string=True, short=True)}')
    logger(f'[SimdJson] Completed Test in: {timer(js, as_string=True, short=True)}')
    logger('----------------------------------------------------------------')


def test_orjson():
    js = timer()
    text = get_text()
    t = OrJson.loads(text)
    num_keys = len(t.keys())
    logger(f'[OrJson] Time to Load with {num_keys} Total Items: {timer(js, as_string=True, short=True)}')
    lt = timer()
    for i in test_keys:
        _ = t[i]
    logger(f'[OrJson] Time to Read {len(test_keys)} Items: {timer(lt, as_string=True, short=True)}')
    lt = timer()
    _ = OrJson.dumps(t)
    logger(f'[OrJson] Time to Dump {len(test_keys)} Items: {timer(lt, as_string=True, short=True)}')
    logger(f'[OrJson] Completed Test in: {timer(js, as_string=True, short=True)}')
    logger('----------------------------------------------------------------')


def test_json():
    js = timer()
    text = get_text()
    ## Explicitly disable Parser
    Json.parser_enabled = False
    t = Json.loads(text)
    logger(f'[Json] Time to Load: {timer(js, as_string=True, short=True)}')
    lt = timer()
    for i in test_keys:
        _ = t[i]
    logger(f'[Json] Time to [Loads]Read {len(test_keys)} Items: {timer(lt, as_string=True, short=True)}')
    t = Json.parse(text)
    logger(f'[Json] Time to Parse: {timer(js, as_string=True, short=True)}')
    lt = timer()
    for i in test_keys:
        _ = t[i]
    logger(f'[Json] Time to [Parse]Read {len(test_keys)} Items: {timer(lt, as_string=True, short=True)}')
    lt = timer()
    _ = Json.dumps(t)
    logger(f'[Json] Time to Dump {len(test_keys)} Items: {timer(lt, as_string=True, short=True)}')
    logger(f'[Json] Completed Test in: {timer(js, as_string=True, short=True)}')
    logger('----------------------------------------------------------------')


"""
Expected Results

Time to Read Text: 0.00095 secs
[OrJson] Time to Load with 2077 Total Items: 0.00378 secs
[OrJson] Time to Read 520 Items: 2e-05 secs
[OrJson] Time to Dump 520 Items: 0.00097 secs
[OrJson] Completed Test in: 0.00497 secs
----------------------------------------------------------------
Time to Read Text: 0.00022 secs
[Json] Time to Load: 0.00234 secs
[Json] Time to [Loads]Read 520 Items: 2e-05 secs
[Json] Time to Parse: 0.0032 secs
[Json] Time to [Parse]Read 520 Items: 0.00237 secs
[Json] Time to Dump 520 Items: 0.00238 secs
[Json] Completed Test in: 0.00814 secs
----------------------------------------------------------------
Time to Read Text: 0.00023 secs
[SimdJson] Time to Parse: 0.00051 secs
[SimdJson] Time to Load 2077 Keys: 0.00214 secs
[SimdJson] Time to Read 520 Items: 0.00011 secs
[SimdJson] Time to Dump 520 Items: 0.00365 secs
[SimdJson] Completed Test in: 0.00611 secs
----------------------------------------------------------------
"""

if __name__ == '__main__':
    
    test_orjson()
    test_json()
    test_simdjson()

